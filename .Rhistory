return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(end - S + 1)
}
}
TSS_emb_index <- function(TSS_seq_ind){
return(TSS_seq_ind %/% 256 - 320)
}
TSS <- TSS %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand),
tss_emb = TSS_emb_index(tss_seq))
TSS     <- getBM(attributes=gene_attributes, mart = ensembl,
filters=c("ensembl_gene_id"), values=list(my_genes$ens_id)) %>%
as_tibble()
colnames(TSS) <- c("ens_id", "start", "end", "tss", "strand")
#### Calculate TSS locations
# calculate TSS location within the DNA sequence
TSS_seq_index <- function(start, end, tss, strand, seq_length = 393216){
if(strand == "+"){
S = start - (seq_length %/% 2 + 1)
return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(end - S + 1)
}
}
#### Calculate TSS locations
# calculate TSS location within the DNA sequence
TSS_seq_index <- function(start, end, tss, strand, seq_length = 393216){
if(strand == "+"){
S = start - (seq_length %/% 2 + 1)
return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(S- tss + 1)
}
}
TSS_emb_index <- function(TSS_seq_ind){
return(TSS_seq_ind %/% 256 - 320)
}
TSS <- TSS %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand),
tss_emb = TSS_emb_index(tss_seq))
TSS <- TSS %>% as_tibble() %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand),
tss_emb = TSS_emb_index(tss_seq))
TSS     <- getBM(attributes=gene_attributes, mart = ensembl,
filters=c("ensembl_gene_id"), values=list(my_genes$ens_id)) %>%
as_tibble()
colnames(TSS) <- c("ens_id", "start", "end", "tss", "strand")
View(TSS)
TSS     <- getBM(attributes=tss_attributes, mart = ensembl,
filters=c("ensembl_gene_id"), values=list(my_genes$ens_id)) %>%
as_tibble()
colnames(TSS) <- c("ens_id", "start", "end", "tss", "strand")
#### Calculate TSS locations
# calculate TSS location within the DNA sequence
TSS_seq_index <- function(start, end, tss, strand, seq_length = 393216){
if(strand == "+"){
S = start - (seq_length %/% 2 + 1)
return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(S- tss + 1)
}
}
TSS_emb_index <- function(TSS_seq_ind){
return(TSS_seq_ind %/% 256 - 320)
}
TSS <- TSS %>% as_tibble() %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand),
tss_emb = TSS_emb_index(tss_seq))
View(TSS)
#### Calculate TSS locations
# calculate TSS location within the DNA sequence
TSS_seq_index <- function(start, end, tss, strand, seq_length = 393216){
if(strand == 1){
S = start - (seq_length %/% 2 + 1)
return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(S- tss + 1)
}
}
TSS_emb_index <- function(TSS_seq_ind){
return(TSS_seq_ind %/% 256 - 320)
}
TSS <- TSS %>% as_tibble() %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand),
tss_emb = TSS_emb_index(tss_seq))
TSS     <- getBM(attributes=tss_attributes, mart = ensembl,
filters=c("ensembl_gene_id"), values=list(my_genes$ens_id)) %>%
as_tibble()
TSS %>% mutate(
tss_seq = TSS_seq_index(start, end, tss, strand))
View(TSS)
TSS     <- getBM(attributes=tss_attributes, mart = ensembl,
filters=c("ensembl_gene_id"), values=list(my_genes$ens_id)) %>%
as_tibble()
colnames(TSS) <- c("ens_id", "start", "end", "tss", "strand")
#### Calculate TSS locations
# calculate TSS location within the DNA sequence
TSS_seq_index <- function(start, end, tss, strand, seq_length = 393216){
if(strand == 1){
S = start - (seq_length %/% 2 + 1)
return(tss - S + 1)
}else{
S = end + (seq_length %/% 2)
return(S- tss + 1)
}
}
TSS_emb_index <- function(TSS_seq_ind){
return(TSS_seq_ind %/% 256 - 320)
}
TSS <- TSS %>% mutate(
tss_seq = if_else(strand == 1,
tss - (start - (393216 %/% 2 + 1)) + 1,
(end + (393216 %/% 2)) - tss + 1),
tss_emb = TSS_emb_index(tss_seq))
saveRDS(TSS, paste0(outdir, "TSS_centered_corrected.rds"))
library(XML)
setwd("~/")
readHTMLTable("../Downloads/filetmp5.htm")
readHTMLTable("../Downloads/filetmp5.htm", header = T)
readHTMLTable("../Downloads/filetmp5.htm")
readHTMLTable("../Downloads/filetmp5.htm", trim = T)
readHTMLTable("../Downloads/filetmp5.htm", as.data.frame = T)
readHTMLList("../Downloads/filetmp5.htm")
pg_tree <- htmlTreeParse("../Downloads/filetmp5.htm")
pg_tree$children
pg_tree$children$html$body
pg_tree$children$html
pg_tree$children$html$body
pg_tree$children$html[[3]]
t,p <- pg_tree$children$html
tmp <- pg_tree$children$html
tmp <- pg_tree$children$html$children$body
pg_tree$children$html$children$body$children
pg_tree$children$html$children$body
pg_tree$children$html$children$body$children$blockquote$children$p$children$font$children$b
pg_tree$children$html$children$body$children$blockquote$children$p$children$font$table
pg_tree$children$html$children$body$children$blockquote$children$p$children$font
pg_tree$children$html$children$body$children$blockquote$children$p$children
pg_tree$children$html$children$body$children$blockquote$children$p
pg_tree$children$html$children$body$children$blockquote
readHTMLTable(pg_tree$children$html$children$body$children$blockquote)
readHTMLTable(cat(pg_tree$children$html$children$body$children$blockquote))
readHTMLTable(print(pg_tree$children$html$children$body$children$blockquote))
library(rvest)
html_nodes(pg_tree, "tr")
html_nodes(read_html("../Downloads/filetmp5.htm"), "tr")
tbl <- html_nodes(read_html("../Downloads/filetmp5.htm"), "tr")
table1 <- html_table(tbl, fill = TRUE)
View(table1)
tabel <- html_nodes(read_html("../Downloads/filetmp5.htm"), "tr")
table1 <- html_table(tabel, fill = TRUE)
View(tabel)
table1[[1]]
table1[[1]]
tabel1[[1]]
tabel[[1]]
tabel[[1]][1]
tabel[[1]]
tabel[[1]][[2]]
tabel[[1]][2]
tabel[[1]]$node
tabel[[1]]$doc
readHTMLTable(tabel)
readHTMLTable(tabel1)
print(tabel)
print(tabel)รท1
print(tabel)[]
print(tabel)[1]
print(tabel)[[1]]
print(tabel)[[1]][[1]]
library(dplyr)
bind_rows(lapply(xml_attrs(tabel), function(x) data.frame(as.list(x), stringsAsFactors=FALSE)))
rm(tbl)
class(tabel)
class(table1)
links <- html_nodes(tabel)
links <- html_nodes(tabel, "td")
bind_rows(lapply(xml_attrs(links), function(x) data.frame(as.list(x), stringsAsFactors=FALSE)))
bind_rows(lapply(xmlAttrs(tabel), function(x) data.frame(as.list(x), stringsAsFactors=FALSE)))
View(links)
links[[1]]
links[[1]]
links[[1]][2]
links[[1]]$doc
links[[1]]$do[1]
links[[1]]$doc[1]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
color_scheme_set("brightblue")
rebuild_cmdstan(cores = 8)
mod <- cmdstan_model("stan_models/NB_model_gpu.stan", cpp_options = list(stan_opencl = TRUE))
rebuild_cmdstan(cores = 8,)
mod <- cmdstan_model("stan_models/NB_model_gpu.stan", cpp_options = list(stan_opencl = TRUE))
setwd("~/")
mod <- cmdstan_model(".cmdstanr/cmdstan-2.29.1/examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(".cmdstanr/cmdstan-2.29.1/examples/bernoulli/bernoulli.stan", cpp_options = list(stan_opencl = TRUE))
mod <- cmdstan_model(".cmdstanr/cmdstan-2.29.1/examples/bernoulli/bernoulli.stan", cpp_options = list(stan_opencl = TRUE))
detach("package:cmdstanr", unload = TRUE)
remotes::install_github("stan-dev/cmdstanr")
library(cmdstanr)
detach("package:cmdstanr", unload = TRUE)
remove.packages("cmdstanr", lib="~/R/win-library/4.1")
remotes::install_github("stan-dev/cmdstanr@install_precompiled_headers_fix")
# First install cmdstanr interface
remotes::install_github("stan-dev/cmdstanr")
library(cmdstanr)
install_cmdstan(cores=8, overwrite = T)
install_cmdstan(cores=8, overwrite = T, )
shiny::runApp('MASTER FRI/Fantasy-F1')
runApp('MASTER FRI/Fantasy-F1')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# data <- as.data.frame(as.matrix(readMM("../data/10x_data/matrix.mtx")))
# genes <- read_tsv("../data/10x_data/features.tsv", col_names = F)
# row.names(data) <- genes$X1
# tmp <- apply(data, 1, sum) < exp(7.) & apply(data, 1, sum) > exp(.5)
# data <- data[tmp, ]
# saveRDS(data, "../data/processed_data/human/filtered_sc_counts.rds")
data <- readRDS("../data/processed_data/human/filtered_sc_counts.rds")
hist(data)
hist(apply(data, 1, mean))
data <- as.data.frame(as.matrix(readMM("../data/10x_data/matrix.mtx")))
library(Matrix)
data <- as.data.frame(as.matrix(readMM("../data/10x_data/matrix.mtx")))
hist(apply(data, 1, mean))
summary(apply(data, 1, mean))
which.max(apply(data, 1, mean))
sum(apply(data, 1, mean)>1)
tmp <- apply(data, 1, mean)
summary(tmp[tmp > 1])
summary(tmp[tmp >= 1])
length(tmp[tmp >= 1])
tmp <- apply(data, 2, mean)
hist(tmp)
hist(apply(epx(data), 1, mean))
hist(apply(exp(data), 1, mean))
tmp <- apply(data, 1, mean)
hist(exp(tmp[tmp < 1]))
hist(apply(exp(data), 1, sum))
tmp <- apply(data, 1, sum)
hist(tmp)
mean(tmp)
sd(tmp)
quantile(tmp, 0.05, .95)
quantile(tmp, 0.1, .9)
quantile(tmp, c(0.1, .9))
quantile(tmp, c(0.1, .5))
quantile(tmp, c(0.1, .95))
quantile(tmp, .9)
tmp[tmp < quantile(tmp, .9)]
tmp2 <- tmp[tmp < quantile(tmp, .9)]
hist(tmp2)
hist(tmp2, breaks = 30)
hist(tmp2, breaks = 100, xlim = (0, 50))
hist(tmp2, breaks = 100, xlim = c(0, 50))
hist(tmp2, breaks = 500, xlim = c(0, 50))
tmp <- tmp[tmp > 0 ]
tmp2 <- tmp[tmp < quantile(tmp, .9)]
quantile(tmp, .9)
hist(tmp2, breaks = 30)
tmp <- tmp[tmp > 1 ]
quantile(tmp, .9)
tmp2 <- tmp[tmp < quantile(tmp, .9)]
hist(tmp2, breaks = 30)
tmp <- apply(data, 1, mean)
sum(tmp>0.5)
average_counts <- apply(data, 1, mean)
hist(average_counts)
hist(average_counts[average_counts >1])
hist(average_counts[average_counts >5])
hist(average_counts[average_counts >5], breaks = 100)
hist(average_counts[average_counts >5], breaks = 30)
average_counts[average_counts >5]
length(average_counts[average_counts >5])
length(average_counts[average_counts >2])
length(average_counts[average_counts >1])
length(average_counts[average_counts >0])
length(average_counts[average_counts == 0])
length(average_counts[average_counts >1])
length(average_counts[average_counts >=1])
length(average_counts[average_counts > 0])
length(average_counts[average_counts > 0.5])
hist(average_counts[average_counts > 0.5])
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 100)
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 1000)
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 500)
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 500)
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 100)
hist(average_counts[average_counts > 0.5], xlim=c(0, 50), breaks = 300)
sum_counts <- apply(data, 1, sum_counts)
sum_counts <- apply(data, 1, sum)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 50), breaks = 300)
hist(sum_counts[sum_counts > 0.5])
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 50), breaks = 3000)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 5000), breaks = 3000)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 3000)
mean(sum_counts[sum_counts > 0.5])
var(sum_counts[sum_counts > 0.5])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
calc_alpha <- function(mu, sig){
alpha <- (mu^2)/(sig-mu)
return(alpha)
}
calc_alpha(mean(sum_counts[sum_counts > 0.5]),)
calc_alpha(mean(sum_counts[sum_counts > 0.5]), var(sum_counts[sum_counts > 0.5]))
mu1 <- mean(sum_counts[sum_counts > 0.5])
alph1 <- calc_alpha(mean(sum_counts[sum_counts > 0.5]), var(sum_counts[sum_counts > 0.5]))
plot(seq(0, 1000,), dnbinom(1:1000, mu = mu1, size = alph1 ))
plot(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
lines(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 3000)
lines(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 3000, freq = T)
lines(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 3000, freq = F)
lines(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 6000, freq = F)
lines(seq(1, 1000), dnbinom(1:1000, mu = mu1, size = alph1 ))
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 10000, freq = F)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 1000), breaks = 100000, freq = F)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 400), breaks = 100000, freq = F)
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1 ))
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1, c = "red" ))
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1, col = "red" ))
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1, cols = "red" ))
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1, col = "red" ))
lines(seq(1, 400), dnbinom(1:400, mu = mu1, size = alph1), col = "red")
lines(seq(1, 200), dnbinom(1:200, mu = mu1, size = alph1), col = "red")
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 200), breaks = 100000, freq = F)
lines(seq(1, 200), dnbinom(1:200, mu = mu1, size = alph1), col = "red")
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 200), breaks = 100000, freq = F)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 400), breaks = 100000, freq = F)
hist(sum_counts[sum_counts > 0.5], xlim=c(0, 400), breaks = 100000, freq = T)
hist(sum_counts[sum_counts > 0.5], xlim=c(1, 400), breaks = 100000, freq = T)
hist(sum_counts[sum_counts > 0.5], xlim=c(1, 400), breaks = 100000, freq = T)
hist(sum_counts[sum_counts > 0.5], xlim=c(2, 400), breaks = 100000, freq = T)
hist(sum_counts[sum_counts > 0.5], xlim=c(3, 400), breaks = 100000, freq = T)
hist(sum_counts[sum_counts > 0.5], xlim=c(5, 400), breaks = 100000, freq = T)
lines(seq(1, 400), dexp(1:400, mu = mu1X))
lines(seq(1, 400), dexp(1:400, mu = mu1))
lines(seq(1, 400), dexp(1:400, rate = mu1))
hist(sum_counts[sum_counts > 0.5], xlim=c(5, 400), breaks = 100000, freq = F)
lines(seq(1, 400), dexp(1:400, rate = mu1))
lines(seq(1, 400), dexp(1:400, rate = mu1), col = "red")
lines(seq(1, 400), dexp(1:400, rate = 1/mu1), col = "red")
hist(sum_counts[sum_counts > 0.5], xlim=c(5, 400), breaks = 100000, freq = F)
getwd()
# util functions
expl_variance <- function(pred, y){
y_dif <- mean(y - pred)
nm <- mean(true - pred - y_dif)^2
den <- mean(y - mean(y))^2
return(nm/den)
}
fit <- readRDS("../fitted_models/mouse/Bayesian/fitted_NB2_gpu.RDS")
setwd(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(posterior)
library(tidyverse)
samps <- draws_df(fit)
samps <- as_draws_df(fit)
View(samps)
samps <- as_draws_df(fit) %>% select(starts_with("b"))
wmu <- samps %>% select(contains("m"))
View(wmu)
wmu <- samps %>% select(contains("b0"))
wmu <- samps %>% select(contains("_m"))
head(select(wmu, contains("b0"), contains(b1)))
head(select(wmu, contains("b0"), contains("b1")))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(posterior)
library(tidyverse)
#### Evaulation script ----
ORG <- "mouse" # "human"
MODELS <- c("MLE", "Bayesian")
METRICS <- list("cor" = cor,
"expl_var" = )
# util functions
expl_variance <- function(pred, y){
y_dif <- mean(y - pred)
nm <- mean(true - pred - y_dif)^2
den <- mean(y - mean(y))^2
return(nm/den)
}
bootstrap_ci <- function(pred, y, M, metric, quants = c(0.025, 0.975)){
vals <- c()
for (i in 1:M){
k <- length(y)
ids <- sample(1:k, k, replace = T)
vals <- c(vals, metric(pred[ids], y[ids]))
}
return(quantile(vals, quants))
}
compute_score <- function(pred, y, score){
metric <- NULL
if (score == "cor"){
metric <- cor
} else if (score == "expl_var"){
metric <- expl_variance
}
sc <- metric(pred, y)
ci <- bootstrap_ci(pred,y, M = 1000, metric = metric)
return(c(sc, ci))
}
load_model <- function(mod_pth, model){
if (model == "MLE"){
mod <- list(
weight_alpha = read.csv(paste(mod_pth, model, "w_alpha_300.csv", sep = "/")),
weight_mu = read.csv(paste(mod_pth, model, "w_mu_300.csv", sep = "/"))
)
} else if (model == "Bayesian"){
fit <- as_draws_df(readRDS(paste(mod_pth,
model,
"fitted_NB2_gpu.RDS", sep="/"))) %>%
select(starts_with("b"))
mod <- list(
weight_alpha = select(fit, contains("a")) %>%
select(contains("b0"), contains("b1")),
weight_mu = select(fit, contains("m")) %>%
select(contains("b0"), contains("b1"))
)
}
return(mod)
}
# model structure:
# list:
#   1) weights_alpha
#   2) weigths_mu
model <- load_model(model_paths, MODELS[1])
# ---- Evaluation ----
model_paths <- paste0("../fitted_models/", ORG)
model <- load_model(model_paths, MODELS[1])
nrow(model$weight_alpha)
ncol(model$weight_alpha)
load_model <- function(mod_pth, model){
if (model == "MLE"){
mod <- list(
weight_alpha = t(read.csv(paste(mod_pth, model, "w_alpha_300.csv", sep = "/"))),
weight_mu = t(read.csv(paste(mod_pth, model, "w_mu_300.csv", sep = "/")))
)
} else if (model == "Bayesian"){
fit <- as_draws_df(readRDS(paste(mod_pth,
model,
"fitted_NB2_gpu.RDS", sep="/"))) %>%
select(starts_with("b"))
mod <- list(
weight_alpha = select(fit, contains("a")) %>%
select(contains("b0"), contains("b1")),
weight_mu = select(fit, contains("m")) %>%
select(contains("b0"), contains("b1"))
)
}
return(mod)
}
# ---- Evaluation ----
model_paths <- paste0("../fitted_models/", ORG)
model <- load_model(model_paths, MODELS[1])
ncol(model$weight_alpha)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
color_scheme_set("brightblue")
calc_alpha <- function(mu, sig){
alpha <- (mu^2)/(sig-mu)
return(alpha)
}
calc_alpha_from_counts  <- function(x){
mu = mean(x)
sig = var(x)
return(calc_alpha(mu, sig))
}
org <- "mouse"
org <- "human" # "mouse"
#---- train data
data <- readRDS(paste0("../data/processed_data/", org, "/processed_counts.rds"))
#---- train data
data <- readRDS(paste0("../data/processed_data/", org, "/filtered_sc_counts.rds"))
genes <- read.csv(paste0("../data/prediction_data/", org,"/genes_300_train.csv"), header = F)[, 1]
genes <- read.csv(paste0("../data/prediction_data/", org,"/genes_300_train.csv"), header = F)[, 1]
tr_counts <- data[ genes, ]
tr_mu <- apply(tr_counts, 1, mean)
tr_alpha <- calc_alpha(mu = tr_mu, sig = apply(tr_counts, 1, var))
emb <- as.matrix(read.csv(paste0("../data/prediction_data/", org, "/X_train_dec300_scaled.csv"),
header = F))
#---- test data
x_te <- as.matrix(read.csv(paste0("../data/prediction_data/", org, "/X_test_dec300_scaled.csv"),
header = F))
te_genes <- read.csv(paste0("../data/prediction_data/", org, "/genes_300_test.csv"), header = F)[, 1]
te_counts <- data[ te_genes, ]
data_list <- list(N = nrow(tr_counts),
M = ncol(emb),
C = ncol(tr_counts),
X = emb,
y = tr_counts)
a <- readRDS("../data/processed_data/human/DNA_seqs_centered_corrected.rds")
a <- readRDS("../data/processed_data/human/DNA_seqs_centered_corrected2.rds")
setwd("~/MASTER FRI/Fantasy-F1")
gp_file <- paste0("db/GP_results/", GPs$Event[gp], ".csv")
shiny::runApp()
runApp()
runApp()
runApp()
